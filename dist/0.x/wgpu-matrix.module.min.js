/* @license wgpu-matrix.js 0.0.2 Copyright (c) 2022, Gregg Tavares All Rights Reserved.
Available via the MIT license.
see: http://github.com/greggman/wgpu-matrix.js for details */
let EPSILON=1e-6;var utils=Object.freeze({__proto__:null,get EPSILON(){return EPSILON},setEpsilon:function(v){const old=EPSILON;return EPSILON=v,old},degToRad:function(degrees){return degrees*Math.PI/180},radToDeg:function(radians){return 180*radians/Math.PI},lerp:function(a,b,t){return a+(b-a)*t},inverseLerp:function(a,b,v){const d=b-a;return Math.abs(b-a)<EPSILON?a:(v-a)/d},euclideanModulo:function(n,m){return(n%m+m)%m}});let VecType$2=Float32Array;function setDefaultType$5(ctor){const oldType=VecType$2;return VecType$2=ctor,oldType}function create$4(x,y){const dst=new VecType$2(2);return void 0!==x&&(dst[0]=x,void 0!==y&&(dst[1]=y)),dst}const fromValues$2=create$4;function subtract$2(a,b,dst){return(dst=dst||new VecType$2(2))[0]=a[0]-b[0],dst[1]=a[1]-b[1],dst}const sub$2=subtract$2;function mulScalar$2(v,k,dst){return(dst=dst||new VecType$2(2))[0]=v[0]*k,dst[1]=v[1]*k,dst}const scale$4=mulScalar$2;function inverse$4(v,dst){return(dst=dst||new VecType$2(2))[0]=1/v[0],dst[1]=1/v[1],dst}const invert$4=inverse$4;function dot$2(a,b){return a[0]*b[0]+a[1]*b[1]}function length$2(v){const v0=v[0],v1=v[1];return Math.sqrt(v0*v0+v1*v1)}const len$2=length$2;function lengthSq$2(v){const v0=v[0],v1=v[1];return v0*v0+v1*v1}const lenSq$2=lengthSq$2;function distance$2(a,b){const dx=a[0]-b[0],dy=a[1]-b[1];return Math.sqrt(dx*dx+dy*dy)}const dist$2=distance$2;function distanceSq$2(a,b){const dx=a[0]-b[0],dy=a[1]-b[1];return dx*dx+dy*dy}const distSq$2=distanceSq$2;function copy$4(v,dst){return(dst=dst||new VecType$2(2))[0]=v[0],dst[1]=v[1],dst}const clone$4=copy$4;function multiply$4(a,b,dst){return(dst=dst||new VecType$2(2))[0]=a[0]*b[0],dst[1]=a[1]*b[1],dst}const mul$4=multiply$4;function divide$2(a,b,dst){return(dst=dst||new VecType$2(2))[0]=a[0]/b[0],dst[1]=a[1]/b[1],dst}const div$2=divide$2;var vec2=Object.freeze({__proto__:null,setDefaultType:setDefaultType$5,create:create$4,fromValues:fromValues$2,ceil:function(v,dst){return(dst=dst||new VecType$2(2))[0]=Math.ceil(v[0]),dst[1]=Math.ceil(v[1]),dst},floor:function(v,dst){return(dst=dst||new VecType$2(2))[0]=Math.floor(v[0]),dst[1]=Math.floor(v[1]),dst},round:function(v,dst){return(dst=dst||new VecType$2(2))[0]=Math.round(v[0]),dst[1]=Math.round(v[1]),dst},clamp:function(v,min=0,max=1,dst){return(dst=dst||new VecType$2(2))[0]=Math.min(max,Math.max(min,v[0])),dst[1]=Math.min(max,Math.max(min,v[1])),dst},add:function(a,b,dst){return(dst=dst||new VecType$2(2))[0]=a[0]+b[0],dst[1]=a[1]+b[1],dst},addScaled:function(a,b,scale,dst){return(dst=dst||new VecType$2(2))[0]=a[0]+b[0]*scale,dst[1]=a[1]+b[1]*scale,dst},angle:function(a,b){const ax=a[0],ay=a[1],bx=a[0],by=a[1],mag=Math.sqrt(ax*ax+ay*ay)*Math.sqrt(bx*bx+by*by),cosine=mag&&dot$2(a,b)/mag;return Math.acos(cosine)},subtract:subtract$2,sub:sub$2,equalsApproximately:function(a,b){return Math.abs(a[0]-b[0])<EPSILON&&Math.abs(a[1]-b[1])<EPSILON},equals:function(a,b){return a[0]===b[0]&&a[1]===b[1]},lerp:function(a,b,t,dst){return(dst=dst||new VecType$2(2))[0]=a[0]+t*(b[0]-a[0]),dst[1]=a[1]+t*(b[1]-a[1]),dst},lerpV:function(a,b,t,dst){return(dst=dst||new VecType$2(2))[0]=a[0]+t[0]*(b[0]-a[0]),dst[1]=a[1]+t[1]*(b[1]-a[1]),dst},max:function(a,b,dst){return(dst=dst||new VecType$2(2))[0]=Math.max(a[0],b[0]),dst[1]=Math.max(a[1],b[1]),dst},min:function(a,b,dst){return(dst=dst||new VecType$2(2))[0]=Math.min(a[0],b[0]),dst[1]=Math.min(a[1],b[1]),dst},mulScalar:mulScalar$2,scale:scale$4,divScalar:function(v,k,dst){return(dst=dst||new VecType$2(2))[0]=v[0]/k,dst[1]=v[1]/k,dst},inverse:inverse$4,invert:invert$4,cross:function(a,b,dst){dst=dst||new VecType$2(3);const z=a[0]*b[1]-a[1]*b[0];return dst[0]=0,dst[1]=0,dst[2]=z,dst},dot:dot$2,length:length$2,len:len$2,lengthSq:lengthSq$2,lenSq:lenSq$2,distance:distance$2,dist:dist$2,distanceSq:distanceSq$2,distSq:distSq$2,normalize:function(v,dst){dst=dst||new VecType$2(2);const v0=v[0],v1=v[1],len=Math.sqrt(v0*v0+v1*v1);return len>1e-5?(dst[0]=v0/len,dst[1]=v1/len):(dst[0]=0,dst[1]=0),dst},negate:function(v,dst){return(dst=dst||new VecType$2(2))[0]=-v[0],dst[1]=-v[1],dst},copy:copy$4,clone:clone$4,multiply:multiply$4,mul:mul$4,divide:divide$2,div:div$2,random:function(scale=1,dst){dst=dst||new VecType$2(2);const angle=2*Math.random()*Math.PI;return dst[0]=Math.cos(angle)*scale,dst[1]=Math.sin(angle)*scale,dst},zero:function(dst){return(dst=dst||new VecType$2(2))[0]=0,dst[1]=0,dst},transformMat4:function(v,m,dst){dst=dst||new VecType$2(2);const x=v[0],y=v[1];return dst[0]=x*m[0]+y*m[4]+m[12],dst[1]=x*m[1]+y*m[5]+m[13],dst},transformMat3:function(v,m,dst){dst=dst||new VecType$2(2);const x=v[0],y=v[1];return dst[0]=m[0]*x+m[4]*y+m[8],dst[1]=m[1]*x+m[5]*y+m[9],dst},transformMat2:function(v,m,dst){dst=dst||new VecType$2(2);const x=v[0],y=v[1];return dst[0]=m[0]*x+m[2]*y,dst[1]=m[1]*x+m[3]*y,dst}});let MatType$1=Float32Array;const ctorMap=new Map([[Float32Array,()=>new Float32Array(12)],[Float64Array,()=>new Float64Array(12)],[Array,()=>new Array(12).fill(0)]]);let newMat3=ctorMap.get(Float32Array);function setDefaultType$4(ctor){const oldType=MatType$1;return MatType$1=ctor,newMat3=ctorMap.get(ctor),oldType}function copy$3(m,dst){return(dst=dst||newMat3())[0]=m[0],dst[1]=m[1],dst[2]=m[2],dst[4]=m[4],dst[5]=m[5],dst[6]=m[6],dst[8]=m[8],dst[9]=m[9],dst[10]=m[10],dst}const clone$3=copy$3;function identity$1(dst){return(dst=dst||newMat3())[0]=1,dst[1]=0,dst[2]=0,dst[4]=0,dst[5]=1,dst[6]=0,dst[8]=0,dst[9]=0,dst[10]=1,dst}function inverse$3(m,dst){dst=dst||newMat3();const m00=m[0],m01=m[1],m02=m[2],m10=m[4],m11=m[5],m12=m[6],m20=m[8],m21=m[9],m22=m[10],m11_x_m22=m11*m22,m21_x_m12=m21*m12,m01_x_m22=m01*m22,m21_x_m02=m21*m02,m01_x_m12=m01*m12,m11_x_m02=m11*m02,invDet=1/(m00*(m11_x_m22-m21_x_m12)-m10*(m01_x_m22-m21_x_m02)+m20*(m01_x_m12-m11_x_m02));return dst[0]=+(m11_x_m22-m21_x_m12)*invDet,dst[1]=-(m10*m22-m20*m12)*invDet,dst[2]=+(m10*m21-m20*m11)*invDet,dst[4]=-(m01_x_m22-m21_x_m02)*invDet,dst[5]=+(m00*m22-m20*m02)*invDet,dst[6]=-(m00*m21-m20*m01)*invDet,dst[8]=+(m01_x_m12-m11_x_m02)*invDet,dst[9]=-(m00*m12-m10*m02)*invDet,dst[10]=+(m00*m11-m10*m01)*invDet,dst}const invert$3=inverse$3;function multiply$3(a,b,dst){dst=dst||newMat3();const a00=a[0],a01=a[1],a02=a[2],a10=a[4],a11=a[5],a12=a[6],a20=a[8],a21=a[9],a22=a[10],b00=b[0],b01=b[1],b02=b[2],b10=b[4],b11=b[5],b12=b[6],b20=b[8],b21=b[9],b22=b[10];return dst[0]=a00*b00+a10*b01+a20*b02,dst[1]=a01*b00+a11*b01+a21*b02,dst[2]=a02*b00+a12*b01+a22*b02,dst[4]=a00*b10+a10*b11+a20*b12,dst[5]=a01*b10+a11*b11+a21*b12,dst[6]=a02*b10+a12*b11+a22*b12,dst[8]=a00*b20+a10*b21+a20*b22,dst[9]=a01*b20+a11*b21+a21*b22,dst[10]=a02*b20+a12*b21+a22*b22,dst}const mul$3=multiply$3;var mat3=Object.freeze({__proto__:null,setDefaultType:setDefaultType$4,create:function(v0,v1,v2,v3,v4,v5,v6,v7,v8){const dst=newMat3();return dst[3]=0,dst[7]=0,dst[11]=0,void 0!==v0&&(dst[0]=v0,void 0!==v1&&(dst[1]=v1,void 0!==v2&&(dst[2]=v2,void 0!==v3&&(dst[4]=v3,void 0!==v4&&(dst[5]=v4,void 0!==v5&&(dst[6]=v5,void 0!==v6&&(dst[8]=v6,void 0!==v7&&(dst[9]=v7,void 0!==v8&&(dst[10]=v8))))))))),dst},negate:function(m,dst){return(dst=dst||newMat3())[0]=-m[0],dst[1]=-m[1],dst[2]=-m[2],dst[4]=-m[4],dst[5]=-m[5],dst[6]=-m[6],dst[8]=-m[8],dst[9]=-m[9],dst[10]=-m[10],dst},copy:copy$3,clone:clone$3,equalsApproximately:function(a,b){return Math.abs(a[0]-b[0])<EPSILON&&Math.abs(a[1]-b[1])<EPSILON&&Math.abs(a[2]-b[2])<EPSILON&&Math.abs(a[4]-b[4])<EPSILON&&Math.abs(a[5]-b[5])<EPSILON&&Math.abs(a[6]-b[6])<EPSILON&&Math.abs(a[8]-b[8])<EPSILON&&Math.abs(a[9]-b[9])<EPSILON&&Math.abs(a[10]-b[10])<EPSILON},equals:function(a,b){return a[0]===b[0]&&a[1]===b[1]&&a[2]===b[2]&&a[4]===b[4]&&a[5]===b[5]&&a[6]===b[6]&&a[8]===b[8]&&a[9]===b[9]&&a[10]===b[10]},identity:identity$1,transpose:function(m,dst){if((dst=dst||newMat3())===m){let t;return t=m[1],m[1]=m[4],m[4]=t,t=m[2],m[2]=m[8],m[8]=t,t=m[6],m[6]=m[9],m[9]=t,dst}const m00=m[0],m01=m[1],m02=m[2],m10=m[4],m11=m[5],m12=m[6],m20=m[8],m21=m[9],m22=m[10];return dst[0]=m00,dst[1]=m10,dst[2]=m20,dst[4]=m01,dst[5]=m11,dst[6]=m21,dst[8]=m02,dst[9]=m12,dst[10]=m22,dst},inverse:inverse$3,determinant:function(m){const m00=m[0],m01=m[1],m02=m[2],m10=m[4],m11=m[5],m12=m[6],m20=m[8],m21=m[9],m22=m[10];return m00*(m11*m22-m21*m12)-m10*(m01*m22-m21*m02)+m20*(m01*m12-m11*m02)},invert:invert$3,multiply:multiply$3,mul:mul$3,setTranslation:function(a,v,dst){return a!==(dst=dst||identity$1())&&(dst[0]=a[0],dst[1]=a[1],dst[2]=a[2],dst[4]=a[4],dst[5]=a[5],dst[6]=a[6]),dst[8]=v[0],dst[9]=v[1],dst[10]=1,dst},getTranslation:function(m,dst){return(dst=dst||create$4())[0]=m[8],dst[1]=m[9],dst},getAxis:function(m,axis,dst){const off=4*axis;return(dst=dst||create$4())[0]=m[off+0],dst[1]=m[off+1],dst},setAxis:function(a,v,axis,dst){dst!==a&&(dst=copy$3(a,dst));const off=4*axis;return dst[off+0]=v[0],dst[off+1]=v[1],dst},getScaling:function(m,dst){dst=dst||create$4();const xx=m[0],xy=m[1],yx=m[4],yy=m[5];return dst[0]=Math.sqrt(xx*xx+xy*xy),dst[1]=Math.sqrt(yx*yx+yy*yy),dst},translation:function(v,dst){return(dst=dst||newMat3())[0]=1,dst[1]=0,dst[2]=0,dst[4]=0,dst[5]=1,dst[6]=0,dst[8]=v[0],dst[9]=v[1],dst[10]=1,dst},translate:function(m,v,dst){dst=dst||newMat3();const v0=v[0],v1=v[1],m00=m[0],m01=m[1],m02=m[2],m10=m[4],m11=m[5],m12=m[6],m20=m[8],m21=m[9],m22=m[10];return m!==dst&&(dst[0]=m00,dst[1]=m01,dst[2]=m02,dst[4]=m10,dst[5]=m11,dst[6]=m12),dst[8]=m00*v0+m10*v1+m20,dst[9]=m01*v0+m11*v1+m21,dst[10]=m02*v0+m12*v1+m22,dst},rotation:function(angleInRadians,dst){dst=dst||newMat3();const c=Math.cos(angleInRadians),s=Math.sin(angleInRadians);return dst[0]=c,dst[1]=s,dst[2]=0,dst[4]=-s,dst[5]=c,dst[6]=0,dst[8]=0,dst[9]=0,dst[10]=1,dst},rotate:function(m,angleInRadians,dst){dst=dst||newMat3();const m00=m[0],m01=m[1],m02=m[2],m10=m[4],m11=m[5],m12=m[6],c=Math.cos(angleInRadians),s=Math.sin(angleInRadians);return dst[0]=c*m00+s*m10,dst[1]=c*m01+s*m11,dst[2]=c*m02+s*m12,dst[4]=c*m10-s*m00,dst[5]=c*m11-s*m01,dst[6]=c*m12-s*m02,m!==dst&&(dst[8]=m[8],dst[9]=m[9],dst[10]=m[10]),dst},scaling:function(v,dst){return(dst=dst||newMat3())[0]=v[0],dst[1]=0,dst[2]=0,dst[4]=0,dst[5]=v[1],dst[6]=0,dst[8]=0,dst[9]=0,dst[10]=1,dst},scale:function(m,v,dst){dst=dst||newMat3();const v0=v[0],v1=v[1];return dst[0]=v0*m[0],dst[1]=v0*m[1],dst[2]=v0*m[2],dst[4]=v1*m[4],dst[5]=v1*m[5],dst[6]=v1*m[6],m!==dst&&(dst[8]=m[8],dst[9]=m[9],dst[10]=m[10]),dst}});let VecType$1=Float32Array;function setDefaultType$3(ctor){const oldType=VecType$1;return VecType$1=ctor,oldType}function create$2(x,y,z){const dst=new VecType$1(3);return void 0!==x&&(dst[0]=x,void 0!==y&&(dst[1]=y,void 0!==z&&(dst[2]=z))),dst}const fromValues$1=create$2;function subtract$1(a,b,dst){return(dst=dst||new VecType$1(3))[0]=a[0]-b[0],dst[1]=a[1]-b[1],dst[2]=a[2]-b[2],dst}const sub$1=subtract$1;function mulScalar$1(v,k,dst){return(dst=dst||new VecType$1(3))[0]=v[0]*k,dst[1]=v[1]*k,dst[2]=v[2]*k,dst}const scale$2=mulScalar$1;function inverse$2(v,dst){return(dst=dst||new VecType$1(3))[0]=1/v[0],dst[1]=1/v[1],dst[2]=1/v[2],dst}const invert$2=inverse$2;function cross(a,b,dst){dst=dst||new VecType$1(3);const t1=a[2]*b[0]-a[0]*b[2],t2=a[0]*b[1]-a[1]*b[0];return dst[0]=a[1]*b[2]-a[2]*b[1],dst[1]=t1,dst[2]=t2,dst}function dot$1(a,b){return a[0]*b[0]+a[1]*b[1]+a[2]*b[2]}function length$1(v){const v0=v[0],v1=v[1],v2=v[2];return Math.sqrt(v0*v0+v1*v1+v2*v2)}const len$1=length$1;function lengthSq$1(v){const v0=v[0],v1=v[1],v2=v[2];return v0*v0+v1*v1+v2*v2}const lenSq$1=lengthSq$1;function distance$1(a,b){const dx=a[0]-b[0],dy=a[1]-b[1],dz=a[2]-b[2];return Math.sqrt(dx*dx+dy*dy+dz*dz)}const dist$1=distance$1;function distanceSq$1(a,b){const dx=a[0]-b[0],dy=a[1]-b[1],dz=a[2]-b[2];return dx*dx+dy*dy+dz*dz}const distSq$1=distanceSq$1;function normalize$1(v,dst){dst=dst||new VecType$1(3);const v0=v[0],v1=v[1],v2=v[2],len=Math.sqrt(v0*v0+v1*v1+v2*v2);return len>1e-5?(dst[0]=v0/len,dst[1]=v1/len,dst[2]=v2/len):(dst[0]=0,dst[1]=0,dst[2]=0),dst}function copy$2(v,dst){return(dst=dst||new VecType$1(3))[0]=v[0],dst[1]=v[1],dst[2]=v[2],dst}const clone$2=copy$2;function multiply$2(a,b,dst){return(dst=dst||new VecType$1(3))[0]=a[0]*b[0],dst[1]=a[1]*b[1],dst[2]=a[2]*b[2],dst}const mul$2=multiply$2;function divide$1(a,b,dst){return(dst=dst||new VecType$1(3))[0]=a[0]/b[0],dst[1]=a[1]/b[1],dst[2]=a[2]/b[2],dst}const div$1=divide$1;var vec3=Object.freeze({__proto__:null,setDefaultType:setDefaultType$3,create:create$2,fromValues:fromValues$1,ceil:function(v,dst){return(dst=dst||new VecType$1(3))[0]=Math.ceil(v[0]),dst[1]=Math.ceil(v[1]),dst[2]=Math.ceil(v[2]),dst},floor:function(v,dst){return(dst=dst||new VecType$1(3))[0]=Math.floor(v[0]),dst[1]=Math.floor(v[1]),dst[2]=Math.floor(v[2]),dst},round:function(v,dst){return(dst=dst||new VecType$1(3))[0]=Math.round(v[0]),dst[1]=Math.round(v[1]),dst[2]=Math.round(v[2]),dst},clamp:function(v,min=0,max=1,dst){return(dst=dst||new VecType$1(3))[0]=Math.min(max,Math.max(min,v[0])),dst[1]=Math.min(max,Math.max(min,v[1])),dst[2]=Math.min(max,Math.max(min,v[2])),dst},add:function(a,b,dst){return(dst=dst||new VecType$1(3))[0]=a[0]+b[0],dst[1]=a[1]+b[1],dst[2]=a[2]+b[2],dst},addScaled:function(a,b,scale,dst){return(dst=dst||new VecType$1(3))[0]=a[0]+b[0]*scale,dst[1]=a[1]+b[1]*scale,dst[2]=a[2]+b[2]*scale,dst},angle:function(a,b){const ax=a[0],ay=a[1],az=a[2],bx=a[0],by=a[1],bz=a[2],mag=Math.sqrt(ax*ax+ay*ay+az*az)*Math.sqrt(bx*bx+by*by+bz*bz),cosine=mag&&dot$1(a,b)/mag;return Math.acos(cosine)},subtract:subtract$1,sub:sub$1,equalsApproximately:function(a,b){return Math.abs(a[0]-b[0])<EPSILON&&Math.abs(a[1]-b[1])<EPSILON&&Math.abs(a[2]-b[2])<EPSILON},equals:function(a,b){return a[0]===b[0]&&a[1]===b[1]&&a[2]===b[2]},lerp:function(a,b,t,dst){return(dst=dst||new VecType$1(3))[0]=a[0]+t*(b[0]-a[0]),dst[1]=a[1]+t*(b[1]-a[1]),dst[2]=a[2]+t*(b[2]-a[2]),dst},lerpV:function(a,b,t,dst){return(dst=dst||new VecType$1(3))[0]=a[0]+t[0]*(b[0]-a[0]),dst[1]=a[1]+t[1]*(b[1]-a[1]),dst[2]=a[2]+t[2]*(b[2]-a[2]),dst},max:function(a,b,dst){return(dst=dst||new VecType$1(3))[0]=Math.max(a[0],b[0]),dst[1]=Math.max(a[1],b[1]),dst[2]=Math.max(a[2],b[2]),dst},min:function(a,b,dst){return(dst=dst||new VecType$1(3))[0]=Math.min(a[0],b[0]),dst[1]=Math.min(a[1],b[1]),dst[2]=Math.min(a[2],b[2]),dst},mulScalar:mulScalar$1,scale:scale$2,divScalar:function(v,k,dst){return(dst=dst||new VecType$1(3))[0]=v[0]/k,dst[1]=v[1]/k,dst[2]=v[2]/k,dst},inverse:inverse$2,invert:invert$2,cross:cross,dot:dot$1,length:length$1,len:len$1,lengthSq:lengthSq$1,lenSq:lenSq$1,distance:distance$1,dist:dist$1,distanceSq:distanceSq$1,distSq:distSq$1,normalize:normalize$1,negate:function(v,dst){return(dst=dst||new VecType$1(3))[0]=-v[0],dst[1]=-v[1],dst[2]=-v[2],dst},copy:copy$2,clone:clone$2,multiply:multiply$2,mul:mul$2,divide:divide$1,div:div$1,random:function(scale=1,dst){dst=dst||new VecType$1(3);const angle=2*Math.random()*Math.PI,z=2*Math.random()-1,zScale=Math.sqrt(1-z*z)*scale;return dst[0]=Math.cos(angle)*zScale,dst[1]=Math.sin(angle)*zScale,dst[2]=z*scale,dst},zero:function(dst){return(dst=dst||new VecType$1(3))[0]=0,dst[1]=0,dst[2]=0,dst},transformMat4:function(v,m,dst){dst=dst||new VecType$1(3);const x=v[0],y=v[1],z=v[2],w=m[3]*x+m[7]*y+m[11]*z+m[15]||1;return dst[0]=(m[0]*x+m[4]*y+m[8]*z+m[12])/w,dst[1]=(m[1]*x+m[5]*y+m[9]*z+m[13])/w,dst[2]=(m[2]*x+m[6]*y+m[10]*z+m[14])/w,dst},transformMat3:function(v,m,dst){dst=dst||new VecType$1(3);const x=v[0],y=v[1],z=v[2];return dst[0]=x*m[0]+y*m[3]+z*m[6],dst[1]=x*m[1]+y*m[4]+z*m[7],dst[2]=x*m[2]+y*m[5]+z*m[8],dst}});let MatType=Float32Array;function setDefaultType$2(ctor){const oldType=MatType;return MatType=ctor,oldType}function copy$1(m,dst){return(dst=dst||new MatType(16))[0]=m[0],dst[1]=m[1],dst[2]=m[2],dst[3]=m[3],dst[4]=m[4],dst[5]=m[5],dst[6]=m[6],dst[7]=m[7],dst[8]=m[8],dst[9]=m[9],dst[10]=m[10],dst[11]=m[11],dst[12]=m[12],dst[13]=m[13],dst[14]=m[14],dst[15]=m[15],dst}const clone$1=copy$1;function identity(dst){return(dst=dst||new MatType(16))[0]=1,dst[1]=0,dst[2]=0,dst[3]=0,dst[4]=0,dst[5]=1,dst[6]=0,dst[7]=0,dst[8]=0,dst[9]=0,dst[10]=1,dst[11]=0,dst[12]=0,dst[13]=0,dst[14]=0,dst[15]=1,dst}function inverse$1(m,dst){dst=dst||new MatType(16);const m00=m[0],m01=m[1],m02=m[2],m03=m[3],m10=m[4],m11=m[5],m12=m[6],m13=m[7],m20=m[8],m21=m[9],m22=m[10],m23=m[11],m30=m[12],m31=m[13],m32=m[14],m33=m[15],tmp0=m22*m33,tmp1=m32*m23,tmp2=m12*m33,tmp3=m32*m13,tmp4=m12*m23,tmp5=m22*m13,tmp6=m02*m33,tmp7=m32*m03,tmp8=m02*m23,tmp9=m22*m03,tmp10=m02*m13,tmp11=m12*m03,tmp12=m20*m31,tmp13=m30*m21,tmp14=m10*m31,tmp15=m30*m11,tmp16=m10*m21,tmp17=m20*m11,tmp18=m00*m31,tmp19=m30*m01,tmp20=m00*m21,tmp21=m20*m01,tmp22=m00*m11,tmp23=m10*m01,t0=tmp0*m11+tmp3*m21+tmp4*m31-(tmp1*m11+tmp2*m21+tmp5*m31),t1=tmp1*m01+tmp6*m21+tmp9*m31-(tmp0*m01+tmp7*m21+tmp8*m31),t2=tmp2*m01+tmp7*m11+tmp10*m31-(tmp3*m01+tmp6*m11+tmp11*m31),t3=tmp5*m01+tmp8*m11+tmp11*m21-(tmp4*m01+tmp9*m11+tmp10*m21),d=1/(m00*t0+m10*t1+m20*t2+m30*t3);return dst[0]=d*t0,dst[1]=d*t1,dst[2]=d*t2,dst[3]=d*t3,dst[4]=d*(tmp1*m10+tmp2*m20+tmp5*m30-(tmp0*m10+tmp3*m20+tmp4*m30)),dst[5]=d*(tmp0*m00+tmp7*m20+tmp8*m30-(tmp1*m00+tmp6*m20+tmp9*m30)),dst[6]=d*(tmp3*m00+tmp6*m10+tmp11*m30-(tmp2*m00+tmp7*m10+tmp10*m30)),dst[7]=d*(tmp4*m00+tmp9*m10+tmp10*m20-(tmp5*m00+tmp8*m10+tmp11*m20)),dst[8]=d*(tmp12*m13+tmp15*m23+tmp16*m33-(tmp13*m13+tmp14*m23+tmp17*m33)),dst[9]=d*(tmp13*m03+tmp18*m23+tmp21*m33-(tmp12*m03+tmp19*m23+tmp20*m33)),dst[10]=d*(tmp14*m03+tmp19*m13+tmp22*m33-(tmp15*m03+tmp18*m13+tmp23*m33)),dst[11]=d*(tmp17*m03+tmp20*m13+tmp23*m23-(tmp16*m03+tmp21*m13+tmp22*m23)),dst[12]=d*(tmp14*m22+tmp17*m32+tmp13*m12-(tmp16*m32+tmp12*m12+tmp15*m22)),dst[13]=d*(tmp20*m32+tmp12*m02+tmp19*m22-(tmp18*m22+tmp21*m32+tmp13*m02)),dst[14]=d*(tmp18*m12+tmp23*m32+tmp15*m02-(tmp22*m32+tmp14*m02+tmp19*m12)),dst[15]=d*(tmp22*m22+tmp16*m02+tmp21*m12-(tmp20*m12+tmp23*m22+tmp17*m02)),dst}const invert$1=inverse$1;function multiply$1(a,b,dst){dst=dst||new MatType(16);const a00=a[0],a01=a[1],a02=a[2],a03=a[3],a10=a[4],a11=a[5],a12=a[6],a13=a[7],a20=a[8],a21=a[9],a22=a[10],a23=a[11],a30=a[12],a31=a[13],a32=a[14],a33=a[15],b00=b[0],b01=b[1],b02=b[2],b03=b[3],b10=b[4],b11=b[5],b12=b[6],b13=b[7],b20=b[8],b21=b[9],b22=b[10],b23=b[11],b30=b[12],b31=b[13],b32=b[14],b33=b[15];return dst[0]=a00*b00+a10*b01+a20*b02+a30*b03,dst[1]=a01*b00+a11*b01+a21*b02+a31*b03,dst[2]=a02*b00+a12*b01+a22*b02+a32*b03,dst[3]=a03*b00+a13*b01+a23*b02+a33*b03,dst[4]=a00*b10+a10*b11+a20*b12+a30*b13,dst[5]=a01*b10+a11*b11+a21*b12+a31*b13,dst[6]=a02*b10+a12*b11+a22*b12+a32*b13,dst[7]=a03*b10+a13*b11+a23*b12+a33*b13,dst[8]=a00*b20+a10*b21+a20*b22+a30*b23,dst[9]=a01*b20+a11*b21+a21*b22+a31*b23,dst[10]=a02*b20+a12*b21+a22*b22+a32*b23,dst[11]=a03*b20+a13*b21+a23*b22+a33*b23,dst[12]=a00*b30+a10*b31+a20*b32+a30*b33,dst[13]=a01*b30+a11*b31+a21*b32+a31*b33,dst[14]=a02*b30+a12*b31+a22*b32+a32*b33,dst[15]=a03*b30+a13*b31+a23*b32+a33*b33,dst}const mul$1=multiply$1;let xAxis,yAxis,zAxis;function axisRotation(axis,angleInRadians,dst){dst=dst||new MatType(16);let x=axis[0],y=axis[1],z=axis[2];const n=Math.sqrt(x*x+y*y+z*z);x/=n,y/=n,z/=n;const xx=x*x,yy=y*y,zz=z*z,c=Math.cos(angleInRadians),s=Math.sin(angleInRadians),oneMinusCosine=1-c;return dst[0]=xx+(1-xx)*c,dst[1]=x*y*oneMinusCosine+z*s,dst[2]=x*z*oneMinusCosine-y*s,dst[3]=0,dst[4]=x*y*oneMinusCosine-z*s,dst[5]=yy+(1-yy)*c,dst[6]=y*z*oneMinusCosine+x*s,dst[7]=0,dst[8]=x*z*oneMinusCosine+y*s,dst[9]=y*z*oneMinusCosine-x*s,dst[10]=zz+(1-zz)*c,dst[11]=0,dst[12]=0,dst[13]=0,dst[14]=0,dst[15]=1,dst}const rotation=axisRotation;function axisRotate(m,axis,angleInRadians,dst){dst=dst||new MatType(16);let x=axis[0],y=axis[1],z=axis[2];const n=Math.sqrt(x*x+y*y+z*z);x/=n,y/=n,z/=n;const xx=x*x,yy=y*y,zz=z*z,c=Math.cos(angleInRadians),s=Math.sin(angleInRadians),oneMinusCosine=1-c,r00=xx+(1-xx)*c,r01=x*y*oneMinusCosine+z*s,r02=x*z*oneMinusCosine-y*s,r10=x*y*oneMinusCosine-z*s,r11=yy+(1-yy)*c,r12=y*z*oneMinusCosine+x*s,r20=x*z*oneMinusCosine+y*s,r21=y*z*oneMinusCosine-x*s,r22=zz+(1-zz)*c,m00=m[0],m01=m[1],m02=m[2],m03=m[3],m10=m[4],m11=m[5],m12=m[6],m13=m[7],m20=m[8],m21=m[9],m22=m[10],m23=m[11];return dst[0]=r00*m00+r01*m10+r02*m20,dst[1]=r00*m01+r01*m11+r02*m21,dst[2]=r00*m02+r01*m12+r02*m22,dst[3]=r00*m03+r01*m13+r02*m23,dst[4]=r10*m00+r11*m10+r12*m20,dst[5]=r10*m01+r11*m11+r12*m21,dst[6]=r10*m02+r11*m12+r12*m22,dst[7]=r10*m03+r11*m13+r12*m23,dst[8]=r20*m00+r21*m10+r22*m20,dst[9]=r20*m01+r21*m11+r22*m21,dst[10]=r20*m02+r21*m12+r22*m22,dst[11]=r20*m03+r21*m13+r22*m23,m!==dst&&(dst[12]=m[12],dst[13]=m[13],dst[14]=m[14],dst[15]=m[15]),dst}const rotate=axisRotate;var mat4=Object.freeze({__proto__:null,setDefaultType:setDefaultType$2,create:function(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15){const dst=new MatType(16);return void 0!==v0&&(dst[0]=v0,void 0!==v1&&(dst[1]=v1,void 0!==v2&&(dst[2]=v2,void 0!==v3&&(dst[3]=v3,void 0!==v4&&(dst[4]=v4,void 0!==v5&&(dst[5]=v5,void 0!==v6&&(dst[6]=v6,void 0!==v7&&(dst[7]=v7,void 0!==v8&&(dst[8]=v8,void 0!==v9&&(dst[9]=v9,void 0!==v10&&(dst[10]=v10,void 0!==v11&&(dst[11]=v11,void 0!==v12&&(dst[12]=v12,void 0!==v13&&(dst[13]=v13,void 0!==v14&&(dst[14]=v14,void 0!==v15&&(dst[15]=v15)))))))))))))))),dst},negate:function(m,dst){return(dst=dst||new MatType(16))[0]=-m[0],dst[1]=-m[1],dst[2]=-m[2],dst[3]=-m[3],dst[4]=-m[4],dst[5]=-m[5],dst[6]=-m[6],dst[7]=-m[7],dst[8]=-m[8],dst[9]=-m[9],dst[10]=-m[10],dst[11]=-m[11],dst[12]=-m[12],dst[13]=-m[13],dst[14]=-m[14],dst[15]=-m[15],dst},copy:copy$1,clone:clone$1,equalsApproximately:function(a,b){return Math.abs(a[0]-b[0])<EPSILON&&Math.abs(a[1]-b[1])<EPSILON&&Math.abs(a[2]-b[2])<EPSILON&&Math.abs(a[3]-b[3])<EPSILON&&Math.abs(a[4]-b[4])<EPSILON&&Math.abs(a[5]-b[5])<EPSILON&&Math.abs(a[6]-b[6])<EPSILON&&Math.abs(a[7]-b[7])<EPSILON&&Math.abs(a[8]-b[8])<EPSILON&&Math.abs(a[9]-b[9])<EPSILON&&Math.abs(a[10]-b[10])<EPSILON&&Math.abs(a[11]-b[11])<EPSILON&&Math.abs(a[12]-b[12])<EPSILON&&Math.abs(a[13]-b[13])<EPSILON&&Math.abs(a[14]-b[14])<EPSILON&&Math.abs(a[15]-b[15])<EPSILON},equals:function(a,b){return a[0]===b[0]&&a[1]===b[1]&&a[2]===b[2]&&a[3]===b[3]&&a[4]===b[4]&&a[5]===b[5]&&a[6]===b[6]&&a[7]===b[7]&&a[8]===b[8]&&a[9]===b[9]&&a[10]===b[10]&&a[11]===b[11]&&a[12]===b[12]&&a[13]===b[13]&&a[14]===b[14]&&a[15]===b[15]},identity:identity,transpose:function(m,dst){if((dst=dst||new MatType(16))===m){let t;return t=m[1],m[1]=m[4],m[4]=t,t=m[2],m[2]=m[8],m[8]=t,t=m[3],m[3]=m[12],m[12]=t,t=m[6],m[6]=m[9],m[9]=t,t=m[7],m[7]=m[13],m[13]=t,t=m[11],m[11]=m[14],m[14]=t,dst}const m00=m[0],m01=m[1],m02=m[2],m03=m[3],m10=m[4],m11=m[5],m12=m[6],m13=m[7],m20=m[8],m21=m[9],m22=m[10],m23=m[11],m30=m[12],m31=m[13],m32=m[14],m33=m[15];return dst[0]=m00,dst[1]=m10,dst[2]=m20,dst[3]=m30,dst[4]=m01,dst[5]=m11,dst[6]=m21,dst[7]=m31,dst[8]=m02,dst[9]=m12,dst[10]=m22,dst[11]=m32,dst[12]=m03,dst[13]=m13,dst[14]=m23,dst[15]=m33,dst},inverse:inverse$1,determinant:function(m){const m00=m[0],m01=m[1],m02=m[2],m03=m[3],m10=m[4],m11=m[5],m12=m[6],m13=m[7],m20=m[8],m21=m[9],m22=m[10],m23=m[11],m30=m[12],m31=m[13],m32=m[14],m33=m[15],tmp0=m22*m33,tmp1=m32*m23,tmp2=m12*m33,tmp3=m32*m13,tmp4=m12*m23,tmp5=m22*m13,tmp6=m02*m33,tmp7=m32*m03,tmp8=m02*m23,tmp9=m22*m03,tmp10=m02*m13,tmp11=m12*m03;return m00*(tmp0*m11+tmp3*m21+tmp4*m31-(tmp1*m11+tmp2*m21+tmp5*m31))+m10*(tmp1*m01+tmp6*m21+tmp9*m31-(tmp0*m01+tmp7*m21+tmp8*m31))+m20*(tmp2*m01+tmp7*m11+tmp10*m31-(tmp3*m01+tmp6*m11+tmp11*m31))+m30*(tmp5*m01+tmp8*m11+tmp11*m21-(tmp4*m01+tmp9*m11+tmp10*m21))},invert:invert$1,multiply:multiply$1,mul:mul$1,setTranslation:function(a,v,dst){return a!==(dst=dst||identity())&&(dst[0]=a[0],dst[1]=a[1],dst[2]=a[2],dst[3]=a[3],dst[4]=a[4],dst[5]=a[5],dst[6]=a[6],dst[7]=a[7],dst[8]=a[8],dst[9]=a[9],dst[10]=a[10],dst[11]=a[11]),dst[12]=v[0],dst[13]=v[1],dst[14]=v[2],dst[15]=1,dst},getTranslation:function(m,dst){return(dst=dst||create$2())[0]=m[12],dst[1]=m[13],dst[2]=m[14],dst},getAxis:function(m,axis,dst){const off=4*axis;return(dst=dst||create$2())[0]=m[off+0],dst[1]=m[off+1],dst[2]=m[off+2],dst},setAxis:function(a,v,axis,dst){dst!==a&&(dst=copy$1(a,dst));const off=4*axis;return dst[off+0]=v[0],dst[off+1]=v[1],dst[off+2]=v[2],dst},getScaling:function(m,dst){dst=dst||create$2();const xx=m[0],xy=m[1],xz=m[2],yx=m[4],yy=m[5],yz=m[6],zx=m[8],zy=m[9],zz=m[10];return dst[0]=Math.sqrt(xx*xx+xy*xy+xz*xz),dst[1]=Math.sqrt(yx*yx+yy*yy+yz*yz),dst[2]=Math.sqrt(zx*zx+zy*zy+zz*zz),dst},perspective:function(fieldOfViewYInRadians,aspect,zNear,zFar,dst){dst=dst||new MatType(16);const f=Math.tan(.5*Math.PI-.5*fieldOfViewYInRadians),rangeInv=1/(zNear-zFar);return dst[0]=f/aspect,dst[1]=0,dst[2]=0,dst[3]=0,dst[4]=0,dst[5]=f,dst[6]=0,dst[7]=0,dst[8]=0,dst[9]=0,dst[10]=zFar*rangeInv,dst[11]=-1,dst[12]=0,dst[13]=0,dst[14]=zNear*zFar*rangeInv,dst[15]=0,dst},ortho:function(left,right,bottom,top,near,far,dst){return(dst=dst||new MatType(16))[0]=2/(right-left),dst[1]=0,dst[2]=0,dst[3]=0,dst[4]=0,dst[5]=2/(top-bottom),dst[6]=0,dst[7]=0,dst[8]=0,dst[9]=0,dst[10]=1/(near-far),dst[11]=0,dst[12]=(right+left)/(left-right),dst[13]=(top+bottom)/(bottom-top),dst[14]=near/(near-far),dst[15]=1,dst},frustum:function(left,right,bottom,top,near,far,dst){const dx=right-left,dy=top-bottom,dz=near-far;return(dst=dst||new MatType(16))[0]=2*near/dx,dst[1]=0,dst[2]=0,dst[3]=0,dst[4]=0,dst[5]=2*near/dy,dst[6]=0,dst[7]=0,dst[8]=(left+right)/dx,dst[9]=(top+bottom)/dy,dst[10]=far/dz,dst[11]=-1,dst[12]=0,dst[13]=0,dst[14]=near*far/dz,dst[15]=0,dst},lookAt:function(eye,target,up,dst){return dst=dst||new MatType(16),xAxis=xAxis||create$2(),yAxis=yAxis||create$2(),zAxis=zAxis||create$2(),normalize$1(subtract$1(eye,target,zAxis),zAxis),normalize$1(cross(up,zAxis,xAxis),xAxis),normalize$1(cross(zAxis,xAxis,yAxis),yAxis),dst[0]=xAxis[0],dst[1]=xAxis[1],dst[2]=xAxis[2],dst[3]=0,dst[4]=yAxis[0],dst[5]=yAxis[1],dst[6]=yAxis[2],dst[7]=0,dst[8]=zAxis[0],dst[9]=zAxis[1],dst[10]=zAxis[2],dst[11]=0,dst[12]=eye[0],dst[13]=eye[1],dst[14]=eye[2],dst[15]=1,dst},translation:function(v,dst){return(dst=dst||new MatType(16))[0]=1,dst[1]=0,dst[2]=0,dst[3]=0,dst[4]=0,dst[5]=1,dst[6]=0,dst[7]=0,dst[8]=0,dst[9]=0,dst[10]=1,dst[11]=0,dst[12]=v[0],dst[13]=v[1],dst[14]=v[2],dst[15]=1,dst},translate:function(m,v,dst){dst=dst||new MatType(16);const v0=v[0],v1=v[1],v2=v[2],m00=m[0],m01=m[1],m02=m[2],m03=m[3],m10=m[4],m11=m[5],m12=m[6],m13=m[7],m20=m[8],m21=m[9],m22=m[10],m23=m[11],m30=m[12],m31=m[13],m32=m[14],m33=m[15];return m!==dst&&(dst[0]=m00,dst[1]=m01,dst[2]=m02,dst[3]=m03,dst[4]=m10,dst[5]=m11,dst[6]=m12,dst[7]=m13,dst[8]=m20,dst[9]=m21,dst[10]=m22,dst[11]=m23),dst[12]=m00*v0+m10*v1+m20*v2+m30,dst[13]=m01*v0+m11*v1+m21*v2+m31,dst[14]=m02*v0+m12*v1+m22*v2+m32,dst[15]=m03*v0+m13*v1+m23*v2+m33,dst},rotationX:function(angleInRadians,dst){dst=dst||new MatType(16);const c=Math.cos(angleInRadians),s=Math.sin(angleInRadians);return dst[0]=1,dst[1]=0,dst[2]=0,dst[3]=0,dst[4]=0,dst[5]=c,dst[6]=s,dst[7]=0,dst[8]=0,dst[9]=-s,dst[10]=c,dst[11]=0,dst[12]=0,dst[13]=0,dst[14]=0,dst[15]=1,dst},rotateX:function(m,angleInRadians,dst){dst=dst||new MatType(16);const m10=m[4],m11=m[5],m12=m[6],m13=m[7],m20=m[8],m21=m[9],m22=m[10],m23=m[11],c=Math.cos(angleInRadians),s=Math.sin(angleInRadians);return dst[4]=c*m10+s*m20,dst[5]=c*m11+s*m21,dst[6]=c*m12+s*m22,dst[7]=c*m13+s*m23,dst[8]=c*m20-s*m10,dst[9]=c*m21-s*m11,dst[10]=c*m22-s*m12,dst[11]=c*m23-s*m13,m!==dst&&(dst[0]=m[0],dst[1]=m[1],dst[2]=m[2],dst[3]=m[3],dst[12]=m[12],dst[13]=m[13],dst[14]=m[14],dst[15]=m[15]),dst},rotationY:function(angleInRadians,dst){dst=dst||new MatType(16);const c=Math.cos(angleInRadians),s=Math.sin(angleInRadians);return dst[0]=c,dst[1]=0,dst[2]=-s,dst[3]=0,dst[4]=0,dst[5]=1,dst[6]=0,dst[7]=0,dst[8]=s,dst[9]=0,dst[10]=c,dst[11]=0,dst[12]=0,dst[13]=0,dst[14]=0,dst[15]=1,dst},rotateY:function(m,angleInRadians,dst){dst=dst||new MatType(16);const m00=m[0],m01=m[1],m02=m[2],m03=m[3],m20=m[8],m21=m[9],m22=m[10],m23=m[11],c=Math.cos(angleInRadians),s=Math.sin(angleInRadians);return dst[0]=c*m00-s*m20,dst[1]=c*m01-s*m21,dst[2]=c*m02-s*m22,dst[3]=c*m03-s*m23,dst[8]=c*m20+s*m00,dst[9]=c*m21+s*m01,dst[10]=c*m22+s*m02,dst[11]=c*m23+s*m03,m!==dst&&(dst[4]=m[4],dst[5]=m[5],dst[6]=m[6],dst[7]=m[7],dst[12]=m[12],dst[13]=m[13],dst[14]=m[14],dst[15]=m[15]),dst},rotationZ:function(angleInRadians,dst){dst=dst||new MatType(16);const c=Math.cos(angleInRadians),s=Math.sin(angleInRadians);return dst[0]=c,dst[1]=s,dst[2]=0,dst[3]=0,dst[4]=-s,dst[5]=c,dst[6]=0,dst[7]=0,dst[8]=0,dst[9]=0,dst[10]=1,dst[11]=0,dst[12]=0,dst[13]=0,dst[14]=0,dst[15]=1,dst},rotateZ:function(m,angleInRadians,dst){dst=dst||new MatType(16);const m00=m[0],m01=m[1],m02=m[2],m03=m[3],m10=m[4],m11=m[5],m12=m[6],m13=m[7],c=Math.cos(angleInRadians),s=Math.sin(angleInRadians);return dst[0]=c*m00+s*m10,dst[1]=c*m01+s*m11,dst[2]=c*m02+s*m12,dst[3]=c*m03+s*m13,dst[4]=c*m10-s*m00,dst[5]=c*m11-s*m01,dst[6]=c*m12-s*m02,dst[7]=c*m13-s*m03,m!==dst&&(dst[8]=m[8],dst[9]=m[9],dst[10]=m[10],dst[11]=m[11],dst[12]=m[12],dst[13]=m[13],dst[14]=m[14],dst[15]=m[15]),dst},axisRotation:axisRotation,rotation:rotation,axisRotate:axisRotate,rotate:rotate,scaling:function(v,dst){return(dst=dst||new MatType(16))[0]=v[0],dst[1]=0,dst[2]=0,dst[3]=0,dst[4]=0,dst[5]=v[1],dst[6]=0,dst[7]=0,dst[8]=0,dst[9]=0,dst[10]=v[2],dst[11]=0,dst[12]=0,dst[13]=0,dst[14]=0,dst[15]=1,dst},scale:function(m,v,dst){dst=dst||new MatType(16);const v0=v[0],v1=v[1],v2=v[2];return dst[0]=v0*m[0],dst[1]=v0*m[1],dst[2]=v0*m[2],dst[3]=v0*m[3],dst[4]=v1*m[4],dst[5]=v1*m[5],dst[6]=v1*m[6],dst[7]=v1*m[7],dst[8]=v2*m[8],dst[9]=v2*m[9],dst[10]=v2*m[10],dst[11]=v2*m[11],m!==dst&&(dst[12]=m[12],dst[13]=m[13],dst[14]=m[14],dst[15]=m[15]),dst},transformPoint:function(m,v,dst){dst=dst||create$2();const v0=v[0],v1=v[1],v2=v[2],d=v0*m[3]+v1*m[7]+v2*m[11]+m[15];return dst[0]=(v0*m[0]+v1*m[4]+v2*m[8]+m[12])/d,dst[1]=(v0*m[1]+v1*m[5]+v2*m[9]+m[13])/d,dst[2]=(v0*m[2]+v1*m[6]+v2*m[10]+m[14])/d,dst},transformDirection:function(m,v,dst){dst=dst||create$2();const v0=v[0],v1=v[1],v2=v[2];return dst[0]=v0*m[0]+v1*m[4]+v2*m[8],dst[1]=v0*m[1]+v1*m[5]+v2*m[9],dst[2]=v0*m[2]+v1*m[6]+v2*m[10],dst},transformNormal:function(m,v,dst){dst=dst||create$2();const mi=inverse$1(m),v0=v[0],v1=v[1],v2=v[2];return dst[0]=v0*mi[0]+v1*mi[1]+v2*mi[2],dst[1]=v0*mi[4]+v1*mi[5]+v2*mi[6],dst[2]=v0*mi[8]+v1*mi[9]+v2*mi[10],dst}});let VecType=Float32Array;function setDefaultType$1(ctor){const oldType=VecType;return VecType=ctor,oldType}function create(x,y,z,w){const dst=new VecType(4);return void 0!==x&&(dst[0]=x,void 0!==y&&(dst[1]=y,void 0!==z&&(dst[2]=z,void 0!==w&&(dst[3]=w)))),dst}const fromValues=create;function subtract(a,b,dst){return(dst=dst||new VecType(4))[0]=a[0]-b[0],dst[1]=a[1]-b[1],dst[2]=a[2]-b[2],dst[3]=a[3]-b[3],dst}const sub=subtract;function mulScalar(v,k,dst){return(dst=dst||new VecType(4))[0]=v[0]*k,dst[1]=v[1]*k,dst[2]=v[2]*k,dst[3]=v[3]*k,dst}const scale=mulScalar;function inverse(v,dst){return(dst=dst||new VecType(4))[0]=1/v[0],dst[1]=1/v[1],dst[2]=1/v[2],dst[3]=1/v[3],dst}const invert=inverse;function length(v){const v0=v[0],v1=v[1],v2=v[2],v3=v[3];return Math.sqrt(v0*v0+v1*v1+v2*v2+v3*v3)}const len=length;function lengthSq(v){const v0=v[0],v1=v[1],v2=v[2],v3=v[3];return v0*v0+v1*v1+v2*v2+v3*v3}const lenSq=lengthSq;function distance(a,b){const dx=a[0]-b[0],dy=a[1]-b[1],dz=a[2]-b[2],dw=a[3]-b[3];return Math.sqrt(dx*dx+dy*dy+dz*dz+dw*dw)}const dist=distance;function distanceSq(a,b){const dx=a[0]-b[0],dy=a[1]-b[1],dz=a[2]-b[2],dw=a[3]-b[3];return dx*dx+dy*dy+dz*dz+dw*dw}const distSq=distanceSq;function copy(v,dst){return(dst=dst||new VecType(4))[0]=v[0],dst[1]=v[1],dst[2]=v[2],dst[3]=v[3],dst}const clone=copy;function multiply(a,b,dst){return(dst=dst||new VecType(4))[0]=a[0]*b[0],dst[1]=a[1]*b[1],dst[2]=a[2]*b[2],dst[3]=a[3]*b[3],dst}const mul=multiply;function divide(a,b,dst){return(dst=dst||new VecType(4))[0]=a[0]/b[0],dst[1]=a[1]/b[1],dst[2]=a[2]/b[2],dst[3]=a[3]/b[3],dst}const div=divide;var vec4=Object.freeze({__proto__:null,setDefaultType:setDefaultType$1,create:create,fromValues:fromValues,ceil:function(v,dst){return(dst=dst||new VecType(4))[0]=Math.ceil(v[0]),dst[1]=Math.ceil(v[1]),dst[2]=Math.ceil(v[2]),dst[3]=Math.ceil(v[3]),dst},floor:function(v,dst){return(dst=dst||new VecType(4))[0]=Math.floor(v[0]),dst[1]=Math.floor(v[1]),dst[2]=Math.floor(v[2]),dst[3]=Math.floor(v[3]),dst},round:function(v,dst){return(dst=dst||new VecType(4))[0]=Math.round(v[0]),dst[1]=Math.round(v[1]),dst[2]=Math.round(v[2]),dst[3]=Math.round(v[3]),dst},clamp:function(v,min=0,max=1,dst){return(dst=dst||new VecType(4))[0]=Math.min(max,Math.max(min,v[0])),dst[1]=Math.min(max,Math.max(min,v[1])),dst[2]=Math.min(max,Math.max(min,v[2])),dst[3]=Math.min(max,Math.max(min,v[3])),dst},add:function(a,b,dst){return(dst=dst||new VecType(4))[0]=a[0]+b[0],dst[1]=a[1]+b[1],dst[2]=a[2]+b[2],dst[3]=a[3]+b[3],dst},addScaled:function(a,b,scale,dst){return(dst=dst||new VecType(4))[0]=a[0]+b[0]*scale,dst[1]=a[1]+b[1]*scale,dst[2]=a[2]+b[2]*scale,dst[3]=a[3]+b[3]*scale,dst},subtract:subtract,sub:sub,equalsApproximately:function(a,b){return Math.abs(a[0]-b[0])<EPSILON&&Math.abs(a[1]-b[1])<EPSILON&&Math.abs(a[2]-b[2])<EPSILON&&Math.abs(a[3]-b[3])<EPSILON},equals:function(a,b){return a[0]===b[0]&&a[1]===b[1]&&a[2]===b[2]&&a[3]===b[3]},lerp:function(a,b,t,dst){return(dst=dst||new VecType(4))[0]=a[0]+t*(b[0]-a[0]),dst[1]=a[1]+t*(b[1]-a[1]),dst[2]=a[2]+t*(b[2]-a[2]),dst[3]=a[3]+t*(b[3]-a[3]),dst},lerpV:function(a,b,t,dst){return(dst=dst||new VecType(4))[0]=a[0]+t[0]*(b[0]-a[0]),dst[1]=a[1]+t[1]*(b[1]-a[1]),dst[2]=a[2]+t[2]*(b[2]-a[2]),dst[3]=a[3]+t[3]*(b[3]-a[3]),dst},max:function(a,b,dst){return(dst=dst||new VecType(4))[0]=Math.max(a[0],b[0]),dst[1]=Math.max(a[1],b[1]),dst[2]=Math.max(a[2],b[2]),dst[3]=Math.max(a[3],b[3]),dst},min:function(a,b,dst){return(dst=dst||new VecType(4))[0]=Math.min(a[0],b[0]),dst[1]=Math.min(a[1],b[1]),dst[2]=Math.min(a[2],b[2]),dst[3]=Math.min(a[3],b[3]),dst},mulScalar:mulScalar,scale:scale,divScalar:function(v,k,dst){return(dst=dst||new VecType(4))[0]=v[0]/k,dst[1]=v[1]/k,dst[2]=v[2]/k,dst[3]=v[3]/k,dst},inverse:inverse,invert:invert,dot:function(a,b){return a[0]*b[0]+a[1]*b[1]+a[2]*b[2]+a[3]*b[3]},length:length,len:len,lengthSq:lengthSq,lenSq:lenSq,distance:distance,dist:dist,distanceSq:distanceSq,distSq:distSq,normalize:function(v,dst){dst=dst||new VecType(4);const v0=v[0],v1=v[1],v2=v[2],v3=v[3],len=Math.sqrt(v0*v0+v1*v1+v2*v2+v3*v3);return len>1e-5?(dst[0]=v0/len,dst[1]=v1/len,dst[2]=v2/len,dst[3]=v3/len):(dst[0]=0,dst[1]=0,dst[2]=0,dst[3]=0),dst},negate:function(v,dst){return(dst=dst||new VecType(4))[0]=-v[0],dst[1]=-v[1],dst[2]=-v[2],dst[3]=-v[3],dst},copy:copy,clone:clone,multiply:multiply,mul:mul,divide:divide,div:div,zero:function(dst){return(dst=dst||new VecType(4))[0]=0,dst[1]=0,dst[2]=0,dst[3]=0,dst},transformMat4:function(v,m,dst){dst=dst||new VecType(4);const x=v[0],y=v[1],z=v[2],w=v[3];return dst[0]=m[0]*x+m[4]*y+m[8]*z+m[12]*w,dst[1]=m[1]*x+m[5]*y+m[9]*z+m[13]*w,dst[2]=m[2]*x+m[6]*y+m[10]*z+m[14]*w,dst[3]=m[3]*x+m[7]*y+m[11]*z+m[15]*w,dst}});function setDefaultType(ctor){setDefaultType$4(ctor),setDefaultType$2(ctor),setDefaultType$5(ctor),setDefaultType$3(ctor),setDefaultType$1(ctor)}export{mat3,mat4,setDefaultType,utils,vec2,vec3,vec4};
